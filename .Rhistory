summary(scaled_crim)
dim(scaled_crim)
n
ind
dim(ind)
length(ind)
dim(train)
test <- boston_scaled[-ind,]
dim(test)
test <- dplyr::select(test, -crime)
library(dplyr)
libraty(MASS)
library(MASS)
library(corrplot)
library(tidyverse)
test <- dplyr::select(test, -crime)
test <- select(test, -crime)
knitr::opts_chunk$set(echo = FALSE)
crime <-as.character(as.numeric(crime))
# plot matrix of the variables
pairs(Boston)
library(MASS)
# load the data
data("Boston")
# explore the dataset
dim(Boston)
str(Boston)
summary(Boston)
# plot matrix of the variables
pairs(Boston)
library(tidyverse)
library(corrplot)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston)
# print the correlation matrix
cor_matrix <- cor_matrix%>%round(2)
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos ="d", tl.cex = 0.6)
# center and standardize variables
boston_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
boston_scaled
class(boston_scaled)
library(dplyr)
library(MASS)
library(corrplot)
library(tidyverse)
# save the scaled crim as scaled_crim
scaled_crim <- scale(boston_scaled$crim)
# summary of the scaled_crim
summary(scaled_crim)
dim(scaled_crim)
# create a quantile vector of crim and print it
bins <- quantile(scaled_crim)
bins
# create a categorical variable 'crime'
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels(c("low", "med-low", "med-high", "high")))
# look at the table of the new factor crime
table(crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
n
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
length(ind)
# create train set
train <- boston_scaled[ind,]
dim(train)
# create test set
test <- boston_scaled[-ind,]
dim(test)
# save the correct classes from test data
correct_classes <- test$crime
crime <-as.numeric(as.character(crime))
train$crim <-as.numeric(as.character(train$crim))
summary(train$crim)
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
summary(crime)
?dplyr::select
library(MASS)
# linear discriminant analysis
lda.fit <- lda(crime ~ . , data = train)
crime <-as.character(as.numeric(crime))
train$crim <-as.character(as.numeric(train$crim))
library(MASS)
# linear discriminant analysis
lda.fit <- lda(crime ~ . , data = train)
library(dplyr)
library(MASS)
library(corrplot)
library(tidyverse)
# save the scaled crim as scaled_crim
scaled_crim <- scale(boston_scaled$crim)
# summary of the scaled_crim
summary(scaled_crim)
dim(scaled_crim)
# create a quantile vector of crim and print it
bins <- quantile(scaled_crim)
bins
# create a categorical variable 'crime'
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels(c("low", "med-low", "med-high", "high")))
# look at the table of the new factor crime
table(crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
n
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
length(ind)
# create train set
train <- boston_scaled[ind,]
dim(train)
# create test set
test <- boston_scaled[-ind,]
dim(test)
# save the correct classes from test data
correct_classes <- test$crime
summary(train$crim)
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
colnames(train$crim)
library(dplyr)
library(MASS)
library(corrplot)
library(tidyverse)
# save the scaled crim as scaled_crim
scaled_crim <- scale(boston_scaled$crim)
# summary of the scaled_crim
summary(scaled_crim)
dim(scaled_crim)
# create a quantile vector of crim and print it
bins <- quantile(scaled_crim)
bins
# create a categorical variable 'crime'
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels(c("low", "med-low", "med-high", "high")))
# look at the table of the new factor crime
table(crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
n
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
length(ind)
# create train set
train <- boston_scaled[ind,]
dim(train)
# create test set
test <- boston_scaled[-ind,]
dim(test)
# save the correct classes from test data
correct_classes <- test$crime
crime <-as.numeric(as.character(crime))
summary(train$crim)
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
summary(crime)
?dplyr::select
train <-as.character(numeric(train))
summary(train)
train$medv <-as.character(numeric(train$medv))
train$medv <-as.numeric(as.character(train$medv))
train <-as.numeric(as.character(train))
summary(train)
library(MASS)
# linear discriminant analysis
lda.fit <- lda(crime ~ . , data = train)
train <- boston_scaled[ind,]
dim(train)
train$. <- as.numeric(as.character(train$.))
train$medv <- as.numeric(as.character(train$medv))
summary(train)
train$medv <- as.numeric(as.character(train$medv))
train$crim <- as.numeric(as.character(train$crim))
train$zn <- as.numeric(as.character(train$zn))
train$indus <- as.numeric(as.character(train$indus))
train$chas <- as.numeric(as.character(train$chas))
train$nox <- as.numeric(as.character(train$nox))
train$rm <- as.numeric(as.character(train$rm))
train$age <- as.numeric(as.character(train$age))
train$dis <- as.numeric(as.character(train$dis))
train$rad <- as.numeric(as.character(train$rad))
train$tax <- as.numeric(as.character(train$tax))
train$ptratio <- as.numeric(as.character(train$ptratio))
train$black <- as.numeric(as.character(train$black))
train$lstat <- as.numeric(as.character(train$lstat))
str(train)
lda.fit <- lda(crime ~ . , data = train)
?lda()
lda.fit <- lda(crime ~ . , data = train, na.action = na.exclude)
library(dplyr)
library(MASS)
library(corrplot)
library(tidyverse)
# boston_scaled is available
summary(Boston)
# save the scaled crim as scaled_crim
scaled_crim <- scale(boston_scaled$crim)
# summary of the scaled_crim
summary(scaled_crim)
# create a quantile vector of crim and print it
bins <- quantile(scaled_crim)
bins
# create a categorical variable 'crime'
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, labels(c("low", "med-low", "med-high", "high")))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
n
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
length(ind)
# create train set
train <- boston_scaled[ind,]
dim(train)
# create test set
test <- boston_scaled[-ind,]
dim(test)
# save the correct classes from test data
correct_classes <- test$crime
crime <-as.numeric(as.character(crime))
summary(train$crim)
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
summary(crime)
?dplyr::select
library(MASS)
# linear discriminant analysis
lda.fit <- lda(crime ~ . , data = train, na.action = na.exclude)
?lda()
length(train$crim)
length(crime)
length(train$nox)
# print the lda.fit object
lda.fit
plot(lda.fit, dimen = 3, col = classes, pch= classes)
library(MASS)
# linear discriminant analysis
lda.fit <- lda(crime ~ . , data = train, na.action = na.exclude)
?lda()
length(train$crim)
length(crime)
length(train$nox)
# print the lda.fit object
lda.fit
# target classes as numeric
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 3, col = classes, pch= classes)
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# plot the lda results
plot(lda.fit, dimen = 2, col  =classes, pch =classes)
lda.arrows(lda.fit, myscale = 10)
library(MASS)
# linear discriminant analysis
lda.fit <- lda(crime ~ . , data = train, na.action = na.exclude)
?lda()
length(train$crim)
length(crime)
length(train$nox)
# print the lda.fit object
lda.fit
# target classes as numeric
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 3, col = classes, pch= classes)
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# plot the lda results
plot(lda.fit, dimen = 2, col  =classes, pch =classes)
lda.arrows(lda.fit, myscale = 6)
library(MASS)
# linear discriminant analysis
lda.fit <- lda(crime ~ . , data = train, na.action = na.exclude)
?lda()
length(train$crim)
length(crime)
length(train$nox)
# print the lda.fit object
lda.fit
# target classes as numeric
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 3, col = classes, pch= classes)
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# plot the lda results
plot(lda.fit, dimen = 2, col  =classes, pch =classes)
lda.arrows(lda.fit, myscale = 3)
library(MASS)
# linear discriminant analysis
lda.fit <- lda(crime ~ . , data = train, na.action = na.exclude)
?lda()
length(train$crim)
length(crime)
length(train$nox)
# print the lda.fit object
lda.fit
# target classes as numeric
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 3, col = classes, pch= classes)
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# plot the lda results
plot(lda.fit, dimen = 2, col  =classes, pch =classes)
lda.arrows(lda.fit, myscale = 10)
# lda.fit, correct_classes and test are available
?predict.lda
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
table(correct = correct_classes, predicted = lda.pred$class)
data("Boston")
?scale()
install.packages("clusterSim")
library(clusterSim)
data.Normalization (Boston,type="n2",normalization="column")
data.Normalization (x,type="n2",normalization="row")
data.Normalization (Boston,type="n2",normalization="row")
data("Boston")
library(clusterSim)
?scale
data.Normalization (Boston,type="n2",normalization="row")
library(MASS)
dist_eu <- dist(Boston)
summary(dist_eu)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
library(ggplot2)
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
# visualize the results
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km$cluster ~ . , data = Boston)
lda.fit
classes <- as.numeric(Boston$km$cluster)
classes <- as.numeric(km$cluster)
plot(lda.fit, dimen = 3, col = classes, pch= classes)
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# plot the lda results
plot(lda.fit, dimen = 2, col  =classes, pch =classes)
lda.arrows(lda.fit, myscale = 10)
lda.arrows(lda.fit, myscale = 20)
plot(lda.fit, dimen = 3, col = classes, pch= classes)
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# plot the lda results
plot(lda.fit, dimen = 2, col  =classes, pch =classes)
lda.arrows(lda.fit, myscale = 20)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
glimpse(hd)
str(hd)
summary(hd)
glimpse(gii)
str(gii)
summary(gii)
colnames(hd)
hd[1] <- "HDI index"
colnames(hd)
colnames(hd)[1] <- "Human Development Index"
setwd("F:/IODS-project")
knitr::opts_chunk$set(echo = TRUE)
summary(human)
human <- as.data.frame(read.table('human.csv'))
glimpse(human)
library(gmodels)
library(gdata)
library(dplyr) #accessed the dplyr-library
library(ggplot2) #accessed the ggplot2-library
library(readr) #accessed the readr-library
library(tidyr) #accessed tidyr-library
library(tidyverse)
library(corrplot)
library(GGally)
glimpse(human)
summary(human)
corrplot(round(cor(human), digits = 2), method = "circle", type = "lower", tl.pos = "d", tl.cex = 0.8)
corrplot(round(cor(human), digits = 2), method = "circle", type = "upper", tl.pos = "d", tl.cex = 0.8)
corrplot(round(cor(human), digits = 2), method = "circle", type = "upper", tl.pos = "u", tl.cex = 0.8)
corrplot(round(cor(human), digits = 2), method = "circle", type = "upper", tl.pos = "d", tl.cex = 0.8)
pca_human <- prcomp(human)
s_nonst <- summary(pca_human)
s_nonst
pr_snonst <- round(100*s_nonst$importance[2, ], digits = 1)
pc_snonst_lab <- paste0(names(pr_snonst), " (", pr_snonst, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.6, 1), col = c("grey40", "deeppink2"), xlab = pc_snonst_lab[1], ylab = pc_snonst_lab[2])
?biplot
?biplot
??colors
pr_snonst <- round(100*s_nonst$importance[2, ], digits = 1)
pc_snonst_lab <- paste0(names(pr_snonst), " (", pr_snonst, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.6, 1), col = c("grey40", "deeppink2"), xlab = pc_snonst_lab[1], ylab = pc_snonst_lab[2])
human_st <- scale(human)
pca_st <- prcomp(human_st)
s_st <- summary(pca_st)
s_st
pr_sst <- round(100*s_st$importance[2, ], digits = 1)
pc_sst_lab <- paste0(names(pr_sst), " (", pr_sst, "%)")
biplot(pca_st, choices = 1:2, cex = c(0.6, 1), col = c("grey40", "deeppink2"), xlab = pc_sst_lab[1], ylab = pc_sst_lab[2])
library(gmodels)
library(gdata)
library(dplyr) #accessed the dplyr-library
library(ggplot2) #accessed the ggplot2-library
library(readr) #accessed the readr-library
library(tidyr) #accessed tidyr-library
library(tidyverse)
library(corrplot)
library(GGally)
human <- as.data.frame(read.table('human.csv'))
glimpse(human)
summary(human)
ggpairs(human)
corrplot(round(cor(human), digits = 2), method = "circle", type = "upper", tl.pos = "d", tl.cex = 0.8)
pca_human <- prcomp(human)
s_nonst <- summary(pca_human)
s_nonst
pr_snonst <- round(100*s_nonst$importance[2, ], digits = 1)
pc_snonst_lab <- paste0(names(pr_snonst), " (", pr_snonst, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.6, 1), col = c("grey40", "deeppink2"), xlab = pc_snonst_lab[1], ylab = pc_snonst_lab[2])
human_st <- scale(human)
pca_st <- prcomp(human_st)
s_st <- summary(pca_st)
s_st
pr_sst <- round(100*s_st$importance[2, ], digits = 1)
pc_sst_lab <- paste0(names(pr_sst), " (", pr_sst, "%)")
biplot(pca_st, choices = 1:2, cex = c(0.6, 1), col = c("grey40", "deeppink2"), xlab = pc_sst_lab[1], ylab = pc_sst_lab[2])
human <- as.data.frame(read.table('human.csv'), sep="\t", header=TRUE)
setwd("F:/IODS-project")
library(gmodels)
library(gdata)
library(dplyr) #accessed the dplyr-library
library(ggplot2) #accessed the ggplot2-library
library(readr) #accessed the readr-library
library(tidyr) #accessed tidyr-library
library(tidyverse)
library(corrplot)
library(GGally)
human <- as.data.frame(read.table('human.csv'))
glimpse(human)
summary(human)
ggpairs(human)
corrplot(round(cor(human), digits = 2), method = "circle", type = "upper", tl.pos = "d", tl.cex = 0.8)
pca_human <- prcomp(human)
s_nonst <- summary(pca_human)
s_nonst
pr_snonst <- round(100*s_nonst$importance[2, ], digits = 1)
pc_snonst_lab <- paste0(names(pr_snonst), " (", pr_snonst, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.6, 1), col = c("grey40", "deeppink2"), xlab = pc_snonst_lab[1], ylab = pc_snonst_lab[2])
human_st <- scale(human)
pca_st <- prcomp(human_st)
s_st <- summary(pca_st)
s_st
pr_sst <- round(100*s_st$importance[2, ], digits = 1)
pc_sst_lab <- paste0(names(pr_sst), " (", pr_sst, "%)")
biplot(pca_st, choices = 1:2, cex = c(0.6, 1), col = c("grey40", "deeppink2"), xlab = pc_sst_lab[1], ylab = pc_sst_lab[2])
